#!/bin/bash
trap "echo Aborting.; exit -1" ERR

CONFIG_FILE=~/ng-install.ini
REL=1.2.0

while getopts XbrdTc: OPTNAME
do
    case $OPTNAME in
    \?) # Option not recognized
        exit 1;;
     d) set -x
        PS4='+${BASH_SOURCE}:${LINENO}:${FUNCNAME[0]}: '
        ;;
     b) BUILD=all;;
     c) CONFIG_FILE=$OPTARG;;
	 T) TOMCAT_CXT=1;;
     r) RUN=1;;
     X) X=1;;
     *) MVNOPT="$MVNOPT -$OPTNAME" ;;
    esac
done
shift $(( $OPTIND - 1 ))

if [[ ! -f $CONFIG_FILE ]]
then
  echo "Config file $CONFIG_FILE does not exist"
  echo "If the name is different, use ${0##*/} -c CONFIG_FILE"
  exit 1
fi

# Build all/some/none of the projects
cd $WORKSPACE
case "${BUILD}" in
    all) mvn -DskipTests -q $MVNOPT install;;
    ui)  mvn -DskipTests -q $MVNOPT install -pl sw-ng-ui;;
esac

echo "*** Copying artifacts from \$WORKSPACE/install into \$WORKSPACE/tools/sw-ng-installer/setup/artifacts ***"
# Set up installer
#   copy the artifacts into the installer
ARTIFACTS_DIR=${WORKSPACE}/tools/sw-ng-installer/setup/artifacts
mkdir -p ${ARTIFACTS_DIR}

find "${WORKSPACE}/install" -name \*.zip -print -exec cp -u {} ${ARTIFACTS_DIR} \;
find services tools/log-server-adapter sw-ng-ui \
    -name \*.war -print -exec cp -u {} ${ARTIFACTS_DIR} \;
echo "Done."

echo "*** Generating buildinfo.txt ***"
#   generate a buildinfo.txt file
cd $WORKSPACE/tools/sw-ng-installer/setup
echo development/SNAPSHOT > $WORKSPACE/tools/sw-ng-installer/setup/buildinfo.txt
echo "Done."

if [[ ! $X ]]
then
echo "*** Invoking installer, giving it config file $CONFIG_FILE ***"

# Run installer
cd $WORKSPACE/tools/sw-ng-installer/setup
./setup.sh "${CONFIG_FILE}"
else
echo NO INSTALL
fi

if [[ $TOMCAT_CXT ]]
then
    echo "-------------------------------------------------------------------------------------"
    echo "*** Removing deployed WAR files and creating conf/Catalina/localhost/* context xml's"
    rm -rf $CATALINA_BASE/app_bases/*/*
    
	CXT_XML_DIR=$CATALINA_BASE/conf/Catalina/localhost
	mkdir -p $CXT_XML_DIR
    rm -f CXT_XML_DIR/*
	svcs=(logging files:file-storage template access-control)
	for svc in ${svcs[@]}
	do
		SVC=${svc##*:}
		ROOT=${svc%%:*}
        cat <<EOF > $CXT_XML_DIR/$ROOT.xml
<?xml version='1.0' encoding='utf-8'?>
<Context
    reloadable="true"
    path="/$ROOT"
    docBase="$WORKSPACE/services/$SVC/$SVC-implementation/target/$SVC-implementation-$REL-SNAPSHOT"
/>
EOF
	done

    cat <<EOF > $CXT_XML_DIR/sw.xml
<?xml version='1.0' encoding='utf-8'?>
<Context
    reloadable="true"
    path="/sw"
    docBase="${WORKSPACE}/sw-ng-ui/target/sw-ng-ui-$REL-SNAPSHOT">
        <WatchedResource>WEB-INF/classes/META-INF/spring/servlet.xml</WatchedResource>
        <WatchedResource>WEB-INF/classes/META-INF/spring/security.xml</WatchedResource>
</Context>
EOF

fi

if [[ $RUN ]]
then
  echo "*** Starting tomcat in the foreground ***"
  # Run tomcat
  catalina.sh jpda run
fi

