###############################################################
### ALIASES AND FUNCTIONS FOR INTERACTIVE USE
###############################################################


# Clears the scrollback buffer, not just the current screen
alias cls='echo -n -e "\ec\e[3J"'

function bd () {
    cd "$OLDPWD"
}


alias start=cygstart
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
alias whiches='type -Pa'
alias type='builtin type -f'

#PROMPT_COMMAND='set +x; set +v; title x ${TITLE_PREFIX}:`dirs`; fixtty' 

function upto ()
{
    local target="$1"
    local here="$(pwd)"
    here="${here%/*}"
    while [  "${here##*/}" != "$target"  -a "${here#*/}" != "$here" ] 
    do
        here="${here%/*}"
    done
    
    if [ "${here##*/}" != "$target" ]
    then
        echo "Not found in upward path: $target"
        return
    else
        cd "$here"
    fi
}

alias pp='echo $PATH | tr : \\12'

function ,() {
    eval "$@" | 1,000
}

function ec() {
  # Note: emacsclient goes with emacs, NOT xemacs
  # The equivalent (and not as good) for xemacs is gnuclient
  
  # Connect to running emacs, or start emacs as server and then connect
  # -nw means TTY mode
  emacsclient -a '' -nw "$@"
}

alias e=npp
alias s=sublime

# run commands, displaying the command at as the terminal's title,
# e.g. 
function wt () {
    title "$1" "$@"
    "$@" ;# no need to use "eval"; that actually causes problems
}

function tp () {
  TITLE_PREFIX="$@"
}

function  deref ()
{
    if [ -L $1 ]
    then
        /bin/ls -ld $1 | sed -e 's/.*-> //g'
    else
        echo $1
    fi
}

function lth () {
    ls -lt "$@" | head
}

alias pp='echo $PATH | tr : \\12'

function y () {
    echo "Nothing else to remove.  Pay attention!"
}


# Comma-format numbers
# Usage: , <cmd> [args]
# e.g.: 
# $ , ls -l
# $ , du
# This causes large numbers in the output of cmd to be formatted with commas,
# like this: 123,456
# If possible, it preserves columns by eating extra whitespace
# to the left of the number to make up for the insertion of the commas
# It won't eat the last remaining space that separates the number
# from whatever precedes it.
function  , ()
{
   "$@" | 1,000
}

# Usage: <cmd> | 1,000
#        1,000 < <textfile>
# e.g: 
# $ ls -l | 1,000
# Note: normally, you would not invoke 1,000 directly, but through , (above)
function 1,000 ()
{
    sed -e ': start' -e 's/\( \?\)\( \?\)\([0-9]\{1,\}\)\([0-9]\{3\}\)/\1\3,\4/g' -e 't start'
}

function jgrep ()
{
    local what="$(echo "$1" | tr / .)";
    local where="$2";
    test -z "$where" && where=.;
    if [ -d "$where" ]; then
        /bin/find "$where" -name '*.jar' -exec sh -c "jar tf \$(dos {} ) | grep -q $what" \; -print;
    elif [ -e "$where" ]; then
        jar tf "$where" | grep "$what";
    else
        echo "jgrep: No such file or directory: $where"
    fi
}

#alias nonag='net stop "Automatic Updates"'

function unx() {
    # e.g. /c/Program Files
    cygpath -ua "$1"
}
function dos() {
    # e.g. C:\PROGRA~1
    cygpath -da "$1"
}
function win() {
    cygpath -wa "$1"
}
function mix() {
    # e.g. C:/Program Files
    cygpath -ma "$1"
}

alias jmeter='(cd $TOOLS_DIR/jmeter/bin; nohup ./jmeter.sh &)'


function cygsetup() {
    curl -\# -o /setup.exe 'http://cygwin.com/setup.exe'
    chmod +x /setup.exe
    cmd /c start $(dos /setup.exe) "$@"
}

function mqst() {
    mvn -q -DskipTests "$@"
}
function mqsti() {
    mqst install "$@"
}
function mqstci() {
    # It's always better to do clean separate from install
    mqst clean "$@"
    mqst install "$@"
}
function mci() {
    mvn clean "$@"
    mvn install "$@"
}
function ntd() {
  $WORKSPACE/tools/deploy.sh "$@"
}


if [[ $(uname) == MINGW* ]] 
then
	echo -n '';# nothing to do
elif [[ -f /usr/bin/git.exe ]]
then
	echo 'Using cygwin git'
elif [[ -d /c/msysgit ]]
then
	echo 'Using MSYS git'

	# cygwin git is not usable, it's busted.
	# msysgit comes with all its own unix programs like ls etc.
	# so it cannot be added to PATH normally.
	git() {
		PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/git "$@"
	}
	gitk() {
		PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/gitk "$@"
	}
	git-bash() {
		PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/git-bash.bat "$@"
	}
else
    echo '*** No git found! ***'
fi

function fixtty() {
    stty sane erase ^H
}

function jenkins() {
    (title Jenkins "JENKINS on 9090"; cd $JENKINS_HOME; java -jar jenkins.war --httpPort=9090)
}

type stty > /dev/null 2>&1 || stty() {
	echo -n
}

function tomcat() {
	shutdown.sh > /dev/null 2>&1
	sleep 2
    /bin/rm /c/tools/tomcat/logs/*
    title Tomcat Tomcat
    catalina.sh jpda run
}

# Cause an annotation entry to show up in Fiddler
function anno() {
    anno=$(echo $* | tr ' ' '_')
    curl -s --proxy http://localhost:8888 "http://localhost/anno?$anno" > /dev/null; 
}

function push-ui() {
  ( 
	trap "echo '***** FAILED *****'; exit" ERR
    #set -x;
    if [[ $1 = -b ]]
    then
        shift
        ( cd $WORKSPACE/sw-ng-ui && mvn -q -DskipTests clean install )
    else
        cp -vua $WORKSPACE/sw-ng-ui/src/main/webapp/* $WORKSPACE/sw-ng-ui/target/sw-ng-ui-1.1.0-SNAPSHOT/
    fi
    
    cp $WORKSPACE/sw-ng-ui/target/sw-ng-ui-1.1.0-SNAPSHOT/index{-dev,}.html
    
    if [[ $1 = -r ]]
    then
		shift
        tomcat
    fi
  )
}

function clear-m2() {
    if [[ $# > 0 ]]
    then
        for pkg in "$@"
        do
            command rm -rf ~/.m2/repository/$pkg
        done
    else
        command rm -rf ~/.m2/repository/
    fi
}

alias dots='/bin/git --git-dir=$HOME/.config.git/ --work-tree=$HOME'

alias ride='(pythonw -c "from robotide import main; main()"&)'

function pybot() {
    pybot.bat \
        -L DEBUG \
        -W $(( $(tput cols) - 2 )) \
        --suitestatlevel 2 \
        --tagstatexclude "TC*" \
        --tagstatexclude "US*" \
        --tagstatexclude "DE*" \
        "$@"
}

function palette() {
    for code in {000..255}; do
        print -n -P -- "${BG[$code]}[$code]"
    done
    print -P -- "$BG[000]"
    print ""
    for code in {000..255}; do
        print -n -P -- "${FG[$code]}[$code]"
    done
    print -P -- "$BG[000]"
}

function git() {
    PATH=/bin:/usr/bin:~/bin:/c/tools/winmerge command git "$@"
}


# WIP XML processing
function xsl() {
    if [[ $1 = -t ]]
    then
        shift
    fi
    xmlstarlet sel -I -D -t "$@"
}

function xpath() {
    if [[ $1 = -x ]]
    then
        shift
        xmlstarlet sel -R -I -D -t -c "$1" -n "$@"
    else
        xmlstarlet sel -t -v "$1" -n "$@"    
    fi
}

function jpda() {
    local port=9000
    local suspend=n
    
    while getopts :sp: OPTNAME "$@"
    do
        case $OPTNAME in
         p) port=$OPTARG;;
         s) suspend=y;;
         *) break;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    
    java -Xdebug -Xrunjdwp:"server=y,transport=dt_socket,address=$port,suspend=$suspend" "$@"
}

function merge_ini() {
	diffmerge --merge --result $HOME/ng-install.ini --title2 MERGED \
		$HOME/ng-install.ini \
		install.ini-common-ancestor.ini \
		${WORKSPACE}/tools/sw-ng-installer/setup/install.ini
}

alias tdc='tree -d -C -I target'

alias skysync="RSYNC_CONNECT_PROG='nc localhost 10873' rsync -av"
