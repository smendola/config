###############################################################
### ALIASES AND FUNCTIONS FOR INTERACTIVE USE
###############################################################


# Clears the scrollback buffer, not just the current screen
alias cls='echo -n -e "\ec\e[3J"'

function bd () {
    cd "$OLDPWD"
}


alias start=cygstart
alias rm='rm -i'
alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
alias whiches='type -Pa'
alias type='builtin type -f'
alias ar=accurev
alias undos=dos2unix

function upto ()
{
    local target="$1"
    local here="$(pwd)"
    here="${here%/*}"
    while [  "${here##*/}" != "$target"  -a "${here#*/}" != "$here" ] 
    do
        here="${here%/*}"
    done
    
    if [ "${here##*/}" != "$target" ]
    then
        echo "Not found in upward path: $target"
        return
    else
        cd "$here"
    fi
}

alias pp='echo $PATH | tr : \\12'

function ,() {
    eval "$@" | 1,000
}

function ec() {
  # Note: emacsclient goes with emacs, NOT xemacs
  # The equivalent (and not as good) for xemacs is gnuclient
  
  # Connect to running emacs, or start emacs as server and then connect
  # -nw means TTY mode
  emacsclient -a '' -nw "$@"
}

alias e=npp
alias s=sublime

# run commands, displaying the command at as the terminal's title,
# e.g. 
function wt () {
    title "$1" "$@"
    "$@" ;# no need to use "eval"; that actually causes problems
}

function tp () {
  TITLE_PREFIX="$@"
}

function  deref ()
{
    if [ -L $1 ]
    then
        /bin/ls -ld $1 | sed -e 's/.*-> //g'
    else
        echo $1
    fi
}

function lth () {
    ls -lt "$@" | head
}

alias pp='echo $PATH | tr : \\12'

function y () {
    echo "Nothing else to remove.  Pay attention!"
}


# Comma-format numbers
# Usage: , <cmd> [args]
# e.g.: 
# $ , ls -l
# $ , du
# This causes large numbers in the output of cmd to be formatted with commas,
# like this: 123,456
# If possible, it preserves columns by eating extra whitespace
# to the left of the number to make up for the insertion of the commas
# It won't eat the last remaining space that separates the number
# from whatever precedes it.
function  , ()
{
   "$@" | 1,000
}

# Usage: <cmd> | 1,000
#        1,000 < <textfile>
# e.g: 
# $ ls -l | 1,000
# Note: normally, you would not invoke 1,000 directly, but through , (above)
function 1,000 ()
{
    sed -e ': start' -e 's/\( \?\)\( \?\)\([0-9]\{1,\}\)\([0-9]\{3\}\)/\1\3,\4/g' -e 't start'
}

function jgrep ()
{
    local what="$(echo "$1" | tr / .)";
    local where="$2";
    test -z "$where" && where=.;
    if [ -d "$where" ]; then
        /bin/find "$where" -name '*.jar' -exec sh -c "jar tf \$(dos {} ) | grep -q $what" \; -print;
    elif [ -e "$where" ]; then
        jar tf "$where" | grep "$what";
    else
        echo "jgrep: No such file or directory: $where"
    fi
}

#alias nonag='net stop "Automatic Updates"'

function unx() {
    # e.g. /c/Program Files
    cygpath -ua "$1"
}
function dos() {
    # e.g. C:\PROGRA~1
    cygpath -da "$1"
}
function win() {
    cygpath -wa "$1"
}
function mix() {
    # e.g. C:/Program Files
    cygpath -ma "$1"
}

alias jmeter='(cd $TOOLS_DIR/jmeter/bin; nohup ./jmeter.sh &)'


function cygsetup() {
    curl -\# -o /setup.exe 'http://cygwin.com/setup-x86.exe'
    chmod +x /setup.exe
    cmd /c start $(dos /setup.exe) "$@"
}

function mqst() {
    mvn -q -DskipTests "$@"
}
function mqsti() {
    mqst install "$@"
}
function ntd() {
  $WORKSPACE/tools/deploy.sh "$@"
}
function nti() {
  $WORKSPACE/tools/install-ng.sh "$@"
}


if [[ $(uname) == MINGW* ]] 
then
    echo -n '';# nothing to do
elif [[ -f /usr/bin/git.exe ]]
then
    echo 'Using cygwin git'
elif [[ -d /c/msysgit ]]
then
    echo 'Using MSYS git'

    # cygwin git is not usable, it's busted.
    # msysgit comes with all its own unix programs like ls etc.
    # so it cannot be added to PATH normally.
    git() {
        PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/git "$@"
    }
    gitk() {
        PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/gitk "$@"
    }
    git-bash() {
        PATH=C:/msysgit/bin:$PATH C:/msysgit/bin/git-bash.bat "$@"
    }
else
    echo '*** No git found! ***'
fi

function skysync-testenv () {
	RSYNC_CONNECT_PROG='nc localhost 11873' rsync --compress-level=9 -av $@
}

function skysync-apphost () {
	RSYNC_CONNECT_PROG='nc localhost 10873' rsync --compress-level=9 -av $@
}

function skysuite()
{
  (
    cd $WORKSPACE/test/robotframework/src/main/suite
    skysync-testenv \
        --exclude=Configuration.txt \
        --exclude='*.pyc' \
        --exclude='*.bak' \
        ./ ::suite/
  )
}

function skylogs () {
    mkdir -p ~/Robot_Logs
    if [[ $1 = -s ]]
    then
        skysync-testenv "skytap::suite/results/*.png" ~/Robot_Logs
        shift
    fi
    
    skysync-testenv \
        "skytap::suite/pybot-args.txt" \
        "skytap::suite/results/output.xml" \
        "skytap::suite/results/log.html" \
        "skytap::suite/results/report.html" \
    	~/Robot_Logs &&
    start ~/Robot_Logs/report.html
}

function fixtty() {
    stty sane erase ^H
}

function jenkins() {
    (title Jenkins "JENKINS on 9090"; cd $JENKINS_HOME; java -jar jenkins.war --httpPort=9090)
}

type stty > /dev/null 2>&1 || stty() {
    echo -n
}

function tomcat() {
    shutdown.sh > /dev/null 2>&1
    sleep 2
    /bin/rm /c/tools/tomcat/logs/*
    title Tomcat Tomcat
    catalina.sh jpda run
}

# Cause an annotation entry to show up in Fiddler
function anno() {
    anno=$(echo $* | tr ' ' '_')
    curl -s --proxy http://localhost:8888 "http://localhost/anno?$anno" > /dev/null; 
}

function push-ui() {
  ( 
    trap "echo '***** FAILED *****'; exit" ERR
    #set -x;
    if [[ $1 = -b ]]
    then
        shift
        ( cd $WORKSPACE/sw-ng-ui && mvn -q -DskipTests clean install )
    else
        cp -vua $WORKSPACE/sw-ng-ui/src/main/webapp/* $WORKSPACE/sw-ng-ui/target/sw-ng-ui-1.1.0-SNAPSHOT/
    fi
    
    cp $WORKSPACE/sw-ng-ui/target/sw-ng-ui-1.1.0-SNAPSHOT/index{-dev,}.html
    
    if [[ $1 = -r ]]
    then
        shift
        tomcat
    fi
  )
}

function clear-m2() {
    if [[ $# > 0 ]]
    then
        for pkg in "$@"
        do
             command rm -rfv ~/.m2/repository/${pkg//.//}
        done
    else
        command rm -rfv ~/.m2/repository/
    fi
}

alias dots='/bin/git --git-dir=$HOME/.config.git/ --work-tree=$HOME'
function syncdots()
{
    (dots status -s | grep -q '.' && echo ci && dots commit -a -m "${1:-bla}" || echo NO CO && true) && 
    echo pull &&  dots pull origin master && 
    echo push &&  dots push
}

function syncconfig()
{
    (
        cd ~/config &&
        echo pull mmaster && git pull origin master &&
        echo pull config-sal && git pull config-sal master &&
        echo push && git push origin master
    )
}

alias ride='(pythonw -c "from robotide import main; main()"&)'
alias rebot='rebot.bat'
# Use the whole width of the terminal for pybot output
alias pybot='pybot.bat -W $(( $(tput cols) - 2 ))'

function palette() {
    for code in {000..255}; do
        print -n -P -- "${BG[$code]}[$code]"
    done
    print -P -- "$BG[000]"
    print ""
    for code in {000..255}; do
        print -n -P -- "${FG[$code]}[$code]"
    done
    print -P -- "$BG[000]"
}

function git() {
    PATH=/bin:/usr/bin:~/bin:/c/tools/winmerge command git "$@"
}


# WIP XML processing
function xsl() {
    if [[ $1 = -t ]]
    then
        shift
    fi
    xmlstarlet sel -I -D -t "$@"
}

function xpath() {
    if [[ $1 = -x ]]
    then
        shift
        xmlstarlet sel -R -I -D -t -c "$1" -n "$@"
    else
        xmlstarlet sel -t -v "$1" -n "$@"    
    fi
}

# Run a Java program in debug mode, so as to be attached in debugger
# Usage: jpda [-p PORTNUM] [-s] other java args...
#       -p PORTNUM  use PORTNUM, default 9000
#       -s          suspend and and wait for debugger to connect
# Example: jpda -s com.my.Code arg arg
function jpda() {
    local port=9000
    local suspend=n
    
    while getopts :sp: OPTNAME "$@"
    do
        case $OPTNAME in
         p) port=$OPTARG;;
         s) suspend=y;;
         *) break;;
        esac
    done
    shift $(( $OPTIND - 1 ))
    
    java -Xdebug -Xrunjdwp:"server=y,transport=dt_socket,address=$port,suspend=$suspend" "$@"
}

function merge_ini() {
    diffmerge --merge --result $HOME/ng-install.ini --title2 MERGED \
        $HOME/ng-install.ini \
        $HOME/install.ini-common-ancestor.ini \
        $WORKSPACE/tools/sw-ng-installer/setup/install.ini
}

alias tdc='tree -AdC -I target'
alias tcf='tree -ACF --dirsfirst'

# Creates a Windows native symbolic link.
# Use mklink as an alternative to ln -s
# the advantage is that this type of link is
# understood by non-cygwin apps, as well
function mklink()
{
    src=$1
    dest=$2
    if [[ -d $2 ]]
    then
        dest=$2/${1##*/}
    fi
    cmd /c mklink $(win "$dest") $(win "$src")
}






###############################################
#### BASH SPECIFIC ALIASES                 ####
#### Stuff you mostly get for free in ZSH  ####
###############################################

# Testing $SHELL gives false results. Try something else.
if [[ $(type print) != *builtin ]]
then

    function prat() { 
        if [[ $TERM == emacs ]]; then
            return;
        fi

        PRAT=$*;
        local attr_list='0';
    #    local attr_list2='0;31;47;7'
        local attr_list2='41'
        local shlvl;
        local title;
        local prompt;
        local remote;

        for attr in $*;
        do
            attr_list="$attr_list;$attr";
        done

        if [[ $SHLVL > 1 ]]; then
            shlvl=" [$SHLVL]";
        fi
        if [[ ! -z $SSH_CONNECTION ]]
        then
            remote=" [REMOTE]"
        fi

        prompt="\n\[\033[${attr_list}m\] \h: \w \[\033[${attr_list2}m\]\$(curbranch_bracketed)$shlvl$remote\[\033[0m\] \n\$ ";
        PS1=$prompt
    }

    # set the terminal window title bar label 
    # Usage: title IGNOREDPARAM WINDOW_TITLE
    title () {
            if [[ "$DISABLE_AUTO_TITLE" = "true" ]] || [[ "$EMACS" = *term* ]]
            then
                    return
            fi
            if [[ "$TERM" = screen* ]]
            then
                    echo -ne "\ek$1e\\"
            elif [[ "$TERM" = xterm* ]] || [[ $TERM = rxvt* ]] || [[ "$TERM_PROGRAM" = "iTerm.app" ]]
            then
                    echo -ne "\e];$2$\a"
                    #echo -ne "\e]2;$2\a"
                    echo -ne "\e]1;$1\a"
            fi
    }


    function curbranch()
    {
        if git branch > /dev/null 2>&1 
        then
            echo $(git branch | grep '^[*]' | cut -c 3-)
        fi
    }

    function curbranch_bracketed()
    {
        __git_ps1 ' (%s) '
        
        #local cb=$(curbranch)    
        #if [[ $cb ]]
        #then
        #    echo " [$cb]"
        #fi
    }

fi
